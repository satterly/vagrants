; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "/var/log/riemann/riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "127.0.0.1"]
  (tcp-server {:host host})
  ;(udp-server {:host host})
  (ws-server  {:host host}))

(instrumentation {:enabled? false})

(graphite-server :host "127.0.0.1"
:port 2003
:protocol :tcp
:parser-fn (fn [{:keys [service] :as event}]
              (if-let [[source metric]
                       (clojure.string/split service #"\." 2)]
                (case source
                   "fastly" (if-let [[domain service] (clojure.string/split metric #"\." 2)] 
                {:host domain
                 :service service
                 :metric (:metric event)
                 :source "fastly"
                 :environment "PROD"
                 :resource domain
                 :transport "graphite"
                 :time (:time event)
                 })
                   "cloudwatch" (if-let [[account & metric] (clojure.string/split metric #"\.")]
                                (let [host (clojure.string/join ":" (butlast metric))]
                {:host host
                 :service (last metric)
                 :metric (:metric event)
                 :account account
                 :environment "PROD"
                 :resource host
                 :transport "graphite"
                 :time (:time event)
                 ; :tags (into [] tags)
                 }))))))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(let [index (index)]
  ; Inbound events will be passed to these streams:
  (streams
    ; Index all events immediately.
    index
    #(info %)

    ; Calculate an overall rate of events.
    (with {:metric 1 :host nil :state "ok" :service "events/sec"}
      (rate 5 index))

    ; Log expired events.
    (expired
      (fn [event] (info "expired" event))))

;    (streams (where* (fn [e] (= (:origin e) "carbon")) 
;         (with {:event "stream1" :group "where*" :host "where*"} #(info %))))

;    (streams (where (= (:origin "carbon"))
;         (with {:event "stream2" :group "where" :host "where"} #(info %))
;         (with {:event "stream2-nomatch" :host "blah"} #(info %))))

;    (streams (where (= ((:origin event) "carbon"))
;         (with {:event "stream3" :group "where" :host "where"} #(info %))))

    (streams (where* #(= "graphite" (:transport %))
         (with {:event "ErrorRate" :group "Network"} #(info %))))
)
